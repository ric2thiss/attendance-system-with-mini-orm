<!-- <?php -->

class Model {
    protected $db;
    protected $table;
    protected $conditions = [];
    protected $params = [];
    protected $joins = [];
    protected $selects = ["*"];
    protected $orderBy = "";
    protected $limit = "";
    protected $groupBy = "";
    protected $having = [];

    public function __construct(PDO $dbconn) {
        $this->db = $dbconn;
    }

    public function table($table) {
        $this->table = $table;
        $this->resetQuery();
        return $this;
    }

    public function select(...$columns) {
        $this->selects = $columns;
        return $this;
    }

    public function where($column, $value) {
        $this->conditions[] = ["AND", "$column = ?"];
        $this->params[] = $value;
        return $this;
    }

    public function orWhere($column, $value) {
        $this->conditions[] = ["OR", "$column = ?"];
        $this->params[] = $value;
        return $this;
    }

    public function whereGroup(callable $callback, $boolean = "AND") {
        $nested = new self($this->db);
        $callback($nested);

        if (!empty($nested->conditions)) {
            $group = "(";
            foreach ($nested->conditions as $index => $condition) {
                [$type, $clause] = $condition;
                if ($index === 0) {
                    $group .= $clause;
                } else {
                    $group .= " $type $clause";
                }
            }
            $group .= ")";
            $this->conditions[] = [$boolean, $group];
            $this->params = array_merge($this->params, $nested->params);
        }

        return $this;
    }

    public function join($table, $first, $operator, $second, $type = "INNER") {
        $this->joins[] = "$type JOIN $table ON $first $operator $second";
        return $this;
    }

    public function orderBy($column, $direction = "ASC") {
        $direction = strtoupper($direction) === "DESC" ? "DESC" : "ASC";
        $this->orderBy = " ORDER BY $column $direction";
        return $this;
    }

    public function limit($limit, $offset = null) {
        $this->limit = " LIMIT " . intval($limit);
        if ($offset !== null) {
            $this->limit .= " OFFSET " . intval($offset);
        }
        return $this;
    }

    public function groupBy($column) {
        $this->groupBy = " GROUP BY $column";
        return $this;
    }

    public function having($column, $operator, $value) {
        $this->having[] = "$column $operator ?";
        $this->params[] = $value;
        return $this;
    }

    private function buildConditions() {
        if (empty($this->conditions)) return "";

        $sql = " WHERE ";
        $clauses = [];
        foreach ($this->conditions as $index => $condition) {
            [$type, $clause] = $condition;
            if ($index === 0) {
                $clauses[] = $clause;
            } else {
                $clauses[] = "$type $clause";
            }
        }
        return $sql . implode(" ", $clauses);
    }

    private function buildHaving() {
        if (empty($this->having)) return "";
        return " HAVING " . implode(" AND ", $this->having);
    }

    public function get() {
        $sql = "SELECT " . implode(", ", $this->selects) . " FROM {$this->table}";
        if ($this->joins) {
            $sql .= " " . implode(" ", $this->joins);
        }
        $sql .= $this->buildConditions();
        if ($this->groupBy) {
            $sql .= $this->groupBy;
        }
        $sql .= $this->buildHaving();
        if ($this->orderBy) {
            $sql .= $this->orderBy;
        }
        if ($this->limit) {
            $sql .= $this->limit;
        }

        $stmt = $this->db->prepare($sql);
        $stmt->execute($this->params);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

        $this->resetQuery();
        return $result;
    }

    public function first() {
        $sql = "SELECT " . implode(", ", $this->selects) . " FROM {$this->table}";
        if ($this->joins) {
            $sql .= " " . implode(" ", $this->joins);
        }
        $sql .= $this->buildConditions();
        if ($this->groupBy) {
            $sql .= $this->groupBy;
        }
        $sql .= $this->buildHaving();
        if ($this->orderBy) {
            $sql .= $this->orderBy;
        }
        $sql .= " LIMIT 1";

        $stmt = $this->db->prepare($sql);
        $stmt->execute($this->params);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        $this->resetQuery();
        return $result;
    }

    public function insert(array $data) {
        $columns = implode(", ", array_keys($data));
        $placeholders = implode(", ", array_fill(0, count($data), "?"));
        $sql = "INSERT INTO {$this->table} ($columns) VALUES ($placeholders)";

        $stmt = $this->db->prepare($sql);
        $stmt->execute(array_values($data));

        return $this->db->lastInsertId();
    }

    public function update(array $data) {
        if (empty($this->conditions)) {
            throw new Exception("Update requires a WHERE condition.");
        }

        $set = [];
        foreach ($data as $col => $val) {
            $set[] = "$col = ?";
            $this->params[] = $val;
        }

        $sql = "UPDATE {$this->table} SET " . implode(", ", $set);
        if ($this->conditions) {
            $sql .= " WHERE " . implode(" AND ", array_map(fn($c) => $c[1], $this->conditions));
        }

        $stmt = $this->db->prepare($sql);
        $success = $stmt->execute($this->params);

        $this->resetQuery();
        return $success;
    }

    public function delete() {
        if (empty($this->conditions)) {
            throw new Exception("Delete requires a WHERE condition.");
        }

        $sql = "DELETE FROM {$this->table}" . $this->buildConditions();

        $stmt = $this->db->prepare($sql);
        $success = $stmt->execute($this->params);

        $this->resetQuery();
        return $success;
    }

    public function count($column = "*") {
        return $this->aggregate("COUNT", $column);
    }

    public function max($column) {
        return $this->aggregate("MAX", $column);
    }

    public function min($column) {
        return $this->aggregate("MIN", $column);
    }

    public function avg($column) {
        return $this->aggregate("AVG", $column);
    }

    public function sum($column) {
        return $this->aggregate("SUM", $column);
    }

    private function aggregate($function, $column) {
        $sql = "SELECT {$function}($column) as aggregate FROM {$this->table}";
        $sql .= $this->buildConditions();
        if ($this->groupBy) {
            $sql .= $this->groupBy;
        }
        $sql .= $this->buildHaving();

        $stmt = $this->db->prepare($sql);
        $stmt->execute($this->params);
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        $this->resetQuery();
        return $result ? $result['aggregate'] : null;
    }

    public function raw($sql, $params = []) {
        $stmt = $this->db->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function rawFirst($sql, $params = []) {
        $stmt = $this->db->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    private function resetQuery() {
        $this->conditions = [];
        $this->params = [];
        $this->joins = [];
        $this->selects = ["*"];
        $this->orderBy = "";
        $this->limit = "";
        $this->groupBy = "";
        $this->having = [];
    }
}
